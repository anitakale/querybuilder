{"version":3,"sources":["common/AuthorizationClient.ts","common/DefaultViewerProps.ts","common/MapLayerOptions.ts","common/ViewSetup.ts","VolumeQueryApi.ts","VolumeQueryWidget.tsx","VolumeQueryApp.tsx","index.tsx"],"names":["SandboxAuthorizationClient","BrowserAuthorizationClient","constructor","configuration","super","authConfig","this","validateConfiguration","clientId","Error","scope","redirectUri","BrowserAuthorizationCallbackHandler","handleSigninCallback","then","async","signIn","catch","error","console","authClient","process","postSignoutRedirectUri","responseType","authority","default3DSandboxUi","contentManipulationTools","cornerItem","hideDefault","hideDefaultHorizontalItems","hideDefaultVerticalItems","verticalItems","sectionTools","measureTools","selectTool","horizontalItems","clearSelection","clearHideIsolateEmphasizeElements","isolateElements","hideElements","emphasizeElements","navigationTools","walkView","cameraView","rotateView","panView","fitView","windowArea","undoView","redoView","hideDefaultStatusBar","hidePropertyGrid","hideToolSettings","hideTreeView","mapLayerOptions","BingMaps","key","value","MapboxImagery","metroStationImodelName","ViewSetup","imodel","defaultViewId","views","queryDefaultViewId","Id64","isValid","spatialViews","getViewList","from","SpatialViewState","classFullName","length","id","drawingViews","DrawingViewState","viewDiv","document","getElementById","clientWidth","clientHeight","viewState","aspect","getAspectRatio","undefined","adjustAspectRatio","viewFlags","copy","shadows","grid","visibleEdges","is3d","displayStyle","getDisplayStyle3d","changeBackgroundMapProps","useDepthBuffer","groundBias","getGroundBias","environment","Environment","fromJSON","sky","display","twoColor","zenithColor","ColorDef","computeTbgrFromString","nadirColor","name","modelIds","getModelIds","subCategoryIds","getSubCategoryIds","planarClipMaskSettings","PlanarClipMaskSettings","create","clone","mode","PlanarClipMaskMode","IncludeSubCategories","planarClipMask","toJSON","isSpatialView","modelsForMasking","transparency","forEach","modelSelector","dropModels","addModels","setOrigin","x","y","z","setExtents","setRotation","Matrix3d","shownCategories","getShownCategories","categorySelector","addCategories","hiddenCategories","getHiddenCategories","dropCategories","iModel","ids","Set","isClosed","modelNames","query","join","row","add","subcategoriesIds","categoryCodes","selectSubCategories","SectionOfColoring","ElementPosition","getDefaultView","viewId","getFirstViewDefinitionId","load","overrideView","addIdsByCategory","selectInCategories","push","VolumeQueryApi","vp","IModelApp","tools","run","ViewClipClearTool","toolId","ViewClipDecorationProvider","toggleDecoration","decorationProvider","clearDecorationOnDeselect","showDecoration","toolAdmin","startDefaultTool","EmphasizeElements","getOrCreate","clearOverriddenElements","elements","presentationProvider","PresentationLabelsProvider","elementsNames","getLabels","i","conn","range","xHigh","yHigh","zHigh","xLow","yLow","zLow","elementsAsync","element","className","candidates","clip","view","getViewClip","candidatesId","map","candidate","classifiedElements","InsideTheBox","Overlap","requestProps","allowOverlaps","result","getGeometryContainment","BentleyStatus","SUCCESS","status","candidatesContainment","val","index","ClipPlaneContainment","StronglyInside","Ambiguous","viewport","computeViewRange","clipRange","ClipUtilities","rangeOfClipperIntersectionWithRange","isNull","setFrom","colors","overrideElements","defaultAppearance","FeatureAppearance","fromRgb","OutsideTheBox","setStandardRotation","StandardViewId","RightIso","computeFitRange","lookAtVolume","addBoxRange","isClippingOn","high","low","block","ClipShape","createBlock","isAlmostZeroZ","ClipMaskXYZRangePlanes","XAndY","All","ClipVector","createEmpty","appendReference","ViewClipTool","enableClipVolume","with","setViewClip","addDecorators","columns","Header","accessor","maxWidth","VolumeQueryWidget","useActiveViewport","iModelConnection","useActiveIModelConnection","volumeBoxState","setVolumeBoxState","React","useState","clipVolumeState","setClipVolumeState","coloredElements","setColoredElements","classifiedElementsColors","setClassifiedElementsColors","green","blue","red","elementsToShow","setElementsToShow","selectedPosition","setSelectedPosition","isLoading","setIsLoading","useEffect","clearColorOverrides","clearClips","computeClipRange","applyColorOverrides","useCallback","internal","overlapping","spatialElements","getSpatialElements","packsOfIds","Math","floor","getClassifiedElements","slice","colorClassifiedElements","concat","Inside","getSpatialElementsWithName","onColorPick","colorValue","position","previousColors","elementDisplayOptions","label","resolvedElements","useMemo","LabeledSelect","size","onChange","options","Text","isMuted","Table","density","data","emptyTableContent","ToggleSwitch","checked","state","disabled","InputGroup","initialColor","color","Outside","Button","styleType","onClick","Alert","type","uiProviders","VolumeQueryWidgetProvider","provideWidgets","_stageId","_stageUsage","location","_section","widgets","StagePanelLocation","Bottom","defaultState","WidgetState","Open","getWidgetContent","viewportOptions","getIsoView","FrontstageManager","onFrontstageReadyEvent","addListener","event","bottomPanel","frontstageDef","VolumeQueryApp","iTwinId","iModelId","enablePerformanceMonitors","defaultUiConfig","theme","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c69594f.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport {\r\n  BrowserAuthorizationCallbackHandler,\r\n  BrowserAuthorizationClient,\r\n  BrowserAuthorizationClientConfiguration\r\n} from \"@itwin/browser-authorization\";\r\n\r\n// This is a thin wrapper class on BrowserAuthorizationClient to validate OIDC configuration\r\nclass SandboxAuthorizationClient extends BrowserAuthorizationClient {\r\n\r\n  private authConfig: BrowserAuthorizationClientConfiguration;\r\n\r\n  constructor(configuration: BrowserAuthorizationClientConfiguration) {\r\n    super(configuration);\r\n    this.validateConfiguration(configuration);\r\n    this.authConfig = configuration;\r\n  }\r\n\r\n  private validateConfiguration(configuration: BrowserAuthorizationClientConfiguration) {\r\n    if (!configuration.clientId) {\r\n      throw new Error(\"Please add a valid OIDC client id to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n    if (!configuration.scope) {\r\n      throw new Error(\"Please add valid scopes for your OIDC client to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n    if (!configuration.redirectUri) {\r\n      throw new Error(\"Please add a valid redirect URI to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n  }\r\n\r\n  // This method combines sign-in and redirect callback handling. Initially it tries to handleSigninCallback,\r\n  // if current url does not match redirectUri (this is the case on the first launch), it returns immediately and executes signIn which initiates oauth authorization flow.\r\n  // Once authorization flow completes, authority server makes a redirect to redirectUri. It reloads the App and handleSigninCallback does it job reading access token.\r\n  // Sandbox accomplish authorization in the background before executing the code, therefore signIn gets already available token from the localStore cache.\r\n  // Full interactive sign-in flow kicks in if you export the project from the Sandbox and run it locally.\r\n  public async signIn() {\r\n    return BrowserAuthorizationCallbackHandler.handleSigninCallback(this.authConfig.redirectUri)\r\n      .then(async () => super.signIn())\r\n      .catch((error) => console.error(error));\r\n  }\r\n}\r\n\r\n// Authorization Client configuration values are provided by the Sandbox runtime\r\n// If this Sandbox is exported, configuration must be provided in\r\n// the .env file of the project. Please visit developer.bentley.com to\r\n// register Application and get Authorization Client details\r\nexport const authClient = new SandboxAuthorizationClient({\r\n  scope: process.env.IMJS_AUTH_CLIENT_SCOPES || \"\",\r\n  clientId: process.env.IMJS_AUTH_CLIENT_CLIENT_ID || \"\",\r\n  redirectUri: process.env.IMJS_AUTH_CLIENT_REDIRECT_URI || \"\",\r\n  postSignoutRedirectUri: process.env.IMJS_AUTH_CLIENT_LOGOUT_URI,\r\n  responseType: \"code\",\r\n  authority: process.env.IMJS_AUTH_AUTHORITY,\r\n});\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ItwinViewerUi } from \"@itwin/web-viewer-react\";\r\n\r\nexport const default3DSandboxUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: false,\r\n      measureTools: false,\r\n      selectTool: false,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: false,\r\n      clearHideIsolateEmphasizeElements: false,\r\n      isolateElements: false,\r\n      hideElements: false,\r\n      emphasizeElements: false,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: true,\r\n      cameraView: true,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: true,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: true,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n\r\nexport const default3DAppUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: true,\r\n      measureTools: true,\r\n      selectTool: true,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: true,\r\n      clearHideIsolateEmphasizeElements: true,\r\n      isolateElements: true,\r\n      hideElements: true,\r\n      emphasizeElements: true,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: true,\r\n      cameraView: true,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: true,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: false,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n\r\nexport const default2DSandboxUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: false,\r\n      measureTools: false,\r\n      selectTool: false,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: false,\r\n      clearHideIsolateEmphasizeElements: false,\r\n      isolateElements: false,\r\n      hideElements: false,\r\n      emphasizeElements: false,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: false,\r\n      cameraView: false,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: false,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: true,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { MapLayerOptions, TileAdmin } from \"@itwin/core-frontend\";\r\n\r\n// Sandbox provides map key values at runtime, however it's required to create your own account at map providers and\r\n// get appropriate access tokens for your own projects (or exported Sandbox)\r\nexport const mapLayerOptions: MapLayerOptions = {\r\n  // Api key for Bing Maps service. For more information https://www.microsoft.com/en-us/maps/create-a-bing-maps-key\r\n  BingMaps: {\r\n    key: \"key\",\r\n    value: process.env.IMJS_BING_MAPS_KEY || \"\",\r\n  },\r\n\r\n  // Access token for Map Box service. For more information: https://docs.mapbox.com/help/getting-started/access-tokens\r\n  MapboxImagery: {\r\n    key: \"access_token\",\r\n    value: process.env.IMJS_MAP_BOX_KEY || \"\",\r\n  },\r\n};\r\n\r\n// Access token for Cesium service. For more information: https://cesium.com/learn/ion/cesium-ion-access-tokens\r\nexport const tileAdminOptions: TileAdmin.Props = {\r\n  cesiumIonKey: process.env.IMJS_CESIUM_ION_KEY || \"\",\r\n};\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Id64, Id64Array, Id64Set, Id64String } from \"@itwin/core-bentley\";\r\nimport { Matrix3d } from \"@itwin/core-geometry\";\r\nimport { ColorDef, Environment, PlanarClipMaskMode, PlanarClipMaskSettings } from \"@itwin/core-common\";\r\nimport { DrawingViewState, IModelConnection, SpatialViewState, ViewState } from \"@itwin/core-frontend\";\r\n\r\nconst metroStationImodelName = \"DRWR04-S3\";\r\nexport class ViewSetup {\r\n  /** Queries for and loads the default view for an iModel. */\r\n  public static getDefaultView = async (imodel: IModelConnection): Promise<ViewState> => {\r\n    const viewId = await ViewSetup.getFirstViewDefinitionId(imodel);\r\n\r\n    // Load the view state using the viewSpec's ID\r\n    const viewState = await imodel.views.load(viewId);\r\n\r\n    // Making some improvements to the default views.\r\n    await ViewSetup.overrideView(imodel, viewState);\r\n\r\n    return viewState;\r\n  };\r\n\r\n  /** Pick the first available spatial view definition in the imodel */\r\n  private static async getFirstViewDefinitionId(imodel: IModelConnection): Promise<Id64String> {\r\n    // Return default view definition (if any)\r\n    const defaultViewId = await imodel.views.queryDefaultViewId();\r\n    if (Id64.isValid(defaultViewId))\r\n      return defaultViewId;\r\n\r\n    // Return first spatial view definition (if any)\r\n    const spatialViews: IModelConnection.ViewSpec[] = await imodel.views.getViewList({ from: SpatialViewState.classFullName });\r\n    if (spatialViews.length > 0)\r\n      return spatialViews[0].id;\r\n\r\n    // Return first drawing view definition (if any)\r\n    const drawingViews: IModelConnection.ViewSpec[] = await imodel.views.getViewList({ from: DrawingViewState.classFullName });\r\n    if (drawingViews.length > 0)\r\n      return drawingViews[0].id;\r\n\r\n    throw new Error(\"No valid view definitions in imodel\");\r\n  }\r\n\r\n  /** Returns the aspect ration of the container the view will be created in. */\r\n  public static getAspectRatio(): number | undefined {\r\n    const viewDiv = document.getElementById(\"sample-container\");\r\n\r\n    if (null === viewDiv)\r\n      return undefined;\r\n\r\n    return viewDiv.clientWidth / viewDiv.clientHeight;\r\n  }\r\n\r\n  /** Makes ascetic changes to the default view */\r\n  public static async overrideView(imodel: IModelConnection, viewState: ViewState) {\r\n    const aspect = ViewSetup.getAspectRatio();\r\n    if (undefined !== aspect) {\r\n      viewState.adjustAspectRatio(aspect);\r\n    }\r\n\r\n    viewState.viewFlags = viewState.viewFlags.copy({ shadows: false, grid: false, visibleEdges: false });\r\n\r\n    if (viewState.is3d()) {\r\n      const viewState3d = viewState;\r\n      const displayStyle = viewState3d.getDisplayStyle3d();\r\n\r\n      displayStyle.changeBackgroundMapProps({ useDepthBuffer: true });\r\n      const groundBias: number | undefined = await ViewSetup.getGroundBias(imodel);\r\n      if (groundBias) {\r\n        displayStyle.changeBackgroundMapProps({ groundBias });\r\n      }\r\n\r\n      // Enable the sky-box, but override to old sky box.\r\n      displayStyle.environment = Environment.fromJSON({\r\n        sky: {\r\n          display: true,\r\n          twoColor: true,\r\n          zenithColor: ColorDef.computeTbgrFromString(\"#DEF2FF\"),\r\n          nadirColor: ColorDef.computeTbgrFromString(\"#F0ECE8\"),\r\n        },\r\n      });\r\n\r\n      // Enable model masking on the metrostation model.\r\n      if (imodel.name === \"Metrostation2\" || imodel.name === metroStationImodelName) {\r\n        const modelIds = await ViewSetup.getModelIds(imodel);\r\n        const subCategoryIds = await this.getSubCategoryIds(imodel, \"S-SLAB-CONC\");\r\n        let planarClipMaskSettings = PlanarClipMaskSettings.create({ subCategoryIds, modelIds });\r\n        planarClipMaskSettings = planarClipMaskSettings.clone({ mode: PlanarClipMaskMode.IncludeSubCategories });\r\n        displayStyle.changeBackgroundMapProps({\r\n          planarClipMask: planarClipMaskSettings.toJSON(),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (viewState.isSpatialView()) {\r\n      const displayStyle = viewState.getDisplayStyle3d();\r\n      // Enable model masking on the Stadium model.\r\n      if (imodel.name === \"Stadium\") {\r\n        const modelsForMasking = await ViewSetup.getModelIds(imodel, \"SS_MasterLandscape.dgn, LandscapeModel\");\r\n\r\n        displayStyle.changeBackgroundMapProps({\r\n          planarClipMask: PlanarClipMaskSettings.create({ modelIds: modelsForMasking }).toJSON(),\r\n          transparency: 0.01, // Temporary fix due to how the planar clip and transparency interact.\r\n        });\r\n        const excludedModelIds = await ViewSetup.getModelIds(imodel,\r\n          \"SS_Master\",\r\n          \"SS_Master_Structural.dgn, 3D Metric Design\",\r\n          \"LandscapeDetails.dgn, 3D Metric Design\",\r\n          \"Stencil Model-4-LandscapeModel, SS_MasterLandscape, SS_MasterLandscape.dgn, Road_Marking\"\r\n        );\r\n        excludedModelIds.forEach((id) => viewState.modelSelector.dropModels(id));\r\n      }\r\n\r\n      // Enable most models on DRWR04-S3 model\r\n      if (imodel.name === metroStationImodelName) {\r\n        const modelIds = await ViewSetup.getModelIds(imodel);\r\n        modelIds.forEach((id) => viewState.modelSelector.addModels(id));\r\n\r\n        const modelsForDropping = await ViewSetup.getModelIds(imodel, \"Geotechnical Investigation, DRWR04-GEO-00-XX-M3-G-00001.dgn, 3d\");\r\n        modelsForDropping.forEach((id) => viewState.modelSelector.dropModels(id));\r\n\r\n        // Change camera\r\n        viewState.setOrigin({ x: 85.69962649857428, y: -73.80364503759616, z: -82.72194576398469 });\r\n        viewState.setExtents({ x: 144.70409923774804, y: 150.2952419865793, z: 151.43496224165358 });\r\n        viewState.setRotation(Matrix3d.fromJSON([-0.8568887533689478, 0.5155013718214635, -1.178475644302565e-15, -0.18679591952287192, -0.31050028450708866, 0.9320390859672258, 0.48046742740732745, 0.7986538104655898, 0.36235775447667495]));\r\n      }\r\n    }\r\n\r\n    const shownCategories = await ViewSetup.getShownCategories(imodel);\r\n    if (shownCategories)\r\n      viewState.categorySelector.addCategories(shownCategories);\r\n\r\n    const hiddenCategories = await ViewSetup.getHiddenCategories(imodel);\r\n    if (hiddenCategories)\r\n      viewState.categorySelector.dropCategories(hiddenCategories);\r\n  }\r\n\r\n  /** Returns a set of every model's id in the iModel. */\r\n  public static async getModelIds(iModel: IModelConnection, ...modelNames: string[]): Promise<Id64Set> {\r\n    const ids = new Set<string>();\r\n    if (!iModel.isClosed) {\r\n      const query = `SELECT ECInstanceId FROM Bis:PhysicalPartition${modelNames.length > 0 ? ` WHERE codeValue IN ('${modelNames.join(\"','\")}')` : \"\"}`;\r\n      for await (const row of iModel.query(query)) {\r\n        ids.add(row[0]);\r\n      }\r\n    }\r\n    return ids;\r\n  }\r\n\r\n  /** Returns a set of every sub category in the specified category codes. */\r\n  public static async getSubCategoryIds(iModel: IModelConnection, ...categoryCodes: string[]): Promise<Id64Set> {\r\n    const subcategoriesIds = new Set<string>();\r\n    if (!iModel.isClosed) {\r\n      const selectSubCategories = `SELECT ECInstanceId as id\r\n                                    FROM BisCore.SubCategory\r\n                                    WHERE Parent.Id IN (\r\n                                      SELECT ECInstanceId\r\n                                      FROM BisCore.SpatialCategory\r\n                                      ${categoryCodes.length > 0 ? `WHERE CodeValue IN ('${categoryCodes.join(\"','\")}')` : \"\"})`;\r\n\r\n      for await (const row of iModel.query(selectSubCategories)) {\r\n        subcategoriesIds.add(row[0]);\r\n      }\r\n    }\r\n    return subcategoriesIds;\r\n  }\r\n\r\n  /** Queries for categories that are unnecessary in the context of the of the sample showcase. */\r\n  private static getHiddenCategories = async (imodel: IModelConnection): Promise<Id64Array | undefined> => {\r\n    const ids: Id64String[] = [];\r\n    const addIdsByCategory = async (...categoryCodes: string[]) => {\r\n      if (!imodel.isClosed) {\r\n        const selectInCategories = `SELECT ECInstanceId FROM bis.Category WHERE CodeValue IN ('${categoryCodes.join(\"','\")}')`;\r\n        for await (const row of imodel.query(selectInCategories))\r\n          ids.push(row.id);\r\n      }\r\n    };\r\n    if (imodel.name === \"house bim upload\")\r\n      // The callout graphics in the house model are ugly - don't display them.\r\n      await addIdsByCategory(\"Callouts\");\r\n\r\n    if (imodel.name === \"Metrostation2\" || imodel.name === metroStationImodelName)\r\n      // There is coincident geometry. Remove the more visible instances.\r\n      await addIdsByCategory(\"A-FLOR-OTLN\", \"A-Reserved Retail Area\", \"G-ANNO-SYMB\", \"A-SITE\", \"S-BEAM-CONC\");\r\n\r\n    return ids;\r\n  };\r\n\r\n  private static getShownCategories = async (imodel: IModelConnection): Promise<Id64Array | undefined> => {\r\n    const ids: Id64String[] = [];\r\n    const addIdsByCategory = async () => {\r\n      if (!imodel.isClosed) {\r\n        const selectInCategories = `SELECT ECInstanceId FROM bis.Category`;\r\n        for await (const row of imodel.query(selectInCategories))\r\n          ids.push(row.id);\r\n      }\r\n    };\r\n    if (imodel.name === metroStationImodelName)\r\n      await addIdsByCategory();\r\n\r\n    return ids;\r\n  };\r\n\r\n  /*\r\n  * groundBias can be stored in Product Settings Service. This method retrieves it.\r\n  */\r\n  public static getGroundBias = async (imodel: IModelConnection): Promise<number | undefined> => {\r\n    if (imodel.name === metroStationImodelName)\r\n      return 3;\r\n\r\n    return undefined;\r\n  };\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BentleyStatus, Id64Array } from \"@itwin/core-bentley\";\r\nimport { ColorDef, FeatureAppearance, GeometryContainmentRequestProps } from \"@itwin/core-common\";\r\nimport { EmphasizeElements, IModelApp, IModelConnection, ScreenViewport, StandardViewId, ViewClipClearTool, ViewClipDecorationProvider, ViewClipTool, ViewState } from \"@itwin/core-frontend\";\r\nimport { ClipMaskXYZRangePlanes, ClipPlaneContainment, ClipShape, ClipUtilities, ClipVector, Range3d } from \"@itwin/core-geometry\";\r\nimport { InstanceKey } from \"@itwin/presentation-common\";\r\nimport { PresentationLabelsProvider } from \"@itwin/presentation-components\";\r\nimport { ViewSetup } from \"./common/ViewSetup\";\r\n\r\n/* Going to color elements from three different sections of volume box */\r\nexport enum SectionOfColoring {\r\n  InsideTheBox = \"Inside\",\r\n  OutsideTheBox = \"Outside\",\r\n  Overlap = \"Overlap\",\r\n}\r\n\r\n/* Going to query and show elements only from two different sections of volume box */\r\nexport enum ElementPosition {\r\n  InsideTheBox = \"Inside\",\r\n  Overlap = \"Overlap\",\r\n}\r\n\r\nexport interface SpatialElement extends Record<string, string | undefined>, InstanceKey {\r\n  name: string | undefined;\r\n}\r\n\r\nexport class VolumeQueryApi {\r\n\r\n  /* Method for clearing all clips in the viewport */\r\n  public static clearClips(vp: ScreenViewport) {\r\n    // Run the ViewClipClearTool and hide the decorators\r\n    void IModelApp.tools.run(ViewClipClearTool.toolId);\r\n    void ViewClipDecorationProvider.create().toggleDecoration(vp);\r\n  }\r\n\r\n  /* Method for adding a new box range around the model's extents */\r\n  public static addBoxRange = (vp: ScreenViewport, range?: Range3d, isClippingOn?: boolean) => {\r\n    // Get the range of the model contents.\r\n    if (range === undefined) {\r\n      range = vp.view.computeFitRange();\r\n      // Remove the top half of the z-range so we have smaller box\r\n      range.high.z = (range.high.z + range.low.z) / 2.0;\r\n    }\r\n    // Create a box for the ClipVector.\r\n    const block: ClipShape = ClipShape.createBlock(range, range.isAlmostZeroZ ? ClipMaskXYZRangePlanes.XAndY : ClipMaskXYZRangePlanes.All, false, false);\r\n    // Create the ClipVector\r\n    const clip: ClipVector = ClipVector.createEmpty();\r\n    // Add the box to the ClipVector and set it in the ScreenViewport.\r\n    clip.appendReference(block);\r\n    // Call enableClipVolume to ensure all clip flags are properly set\r\n    ViewClipTool.enableClipVolume(vp);\r\n    // Turning off the clipping feature.\r\n    vp.view.viewFlags = vp.view.viewFlags.with(\"clipVolume\", isClippingOn === undefined ? false : isClippingOn);\r\n    vp.view.setViewClip(clip);\r\n    VolumeQueryApi.addDecorators(vp);\r\n  };\r\n\r\n  /* Method for adding decorators to the viewport */\r\n  public static addDecorators(vp: ScreenViewport) {\r\n    // Create a clip decorator. Selecting the clip decoration to immediately show the handles is the default.\r\n    const decorationProvider: ViewClipDecorationProvider = ViewClipDecorationProvider.create();\r\n    // Default behavior is to hide the decorators on deselect. We want to keep the decorators showing in this example.\r\n    decorationProvider.clearDecorationOnDeselect = false;\r\n    decorationProvider.showDecoration(vp);\r\n    // The decorators require the SelectTool being active.\r\n    void IModelApp.toolAdmin.startDefaultTool();\r\n  }\r\n\r\n  /* Clear color from colored elements */\r\n  public static clearColorOverrides(vp: ScreenViewport) {\r\n    EmphasizeElements.getOrCreate(vp).clearOverriddenElements(vp);\r\n  }\r\n\r\n  /* Getting elements names */\r\n  public static async getSpatialElementsWithName(vp: ScreenViewport, elements: SpatialElement[]): Promise<SpatialElement[]> {\r\n    const presentationProvider = new PresentationLabelsProvider({ imodel: vp.iModel });\r\n    const elementsNames: string[] = await presentationProvider.getLabels(elements);\r\n    for (let i = 0; i < elements.length; i++)\r\n      elements[i].name = elementsNames[i];\r\n\r\n    return elements;\r\n  }\r\n\r\n  /* Getting elements that are inside or overlapping the given range*/\r\n  public static async getSpatialElements(conn: IModelConnection, range: Range3d): Promise<SpatialElement[]> {\r\n    const query = `SELECT e.ECInstanceId,  ec_classname(e.ECClassId, 's:c')  FROM bis.SpatialElement e JOIN bis.SpatialIndex i ON e.ECInstanceId=i.ECInstanceId WHERE i.MinX<=${range.xHigh} AND i.MinY<=${range.yHigh} AND i.MinZ<=${range.zHigh} AND i.MaxX >= ${range.xLow} AND i.MaxY >= ${range.yLow} AND i.MaxZ >= ${range.zLow}`;\r\n    const elementsAsync = conn.query(query);\r\n    const elements: SpatialElement[] = [];\r\n    for await (const element of elementsAsync) {\r\n      elements.push({ id: element[0], className: element[1], name: undefined });\r\n    }\r\n\r\n    return elements;\r\n  }\r\n\r\n  /* Classify given elements - inside and overlapping. What is left are going to be outside the box*/\r\n  public static async getClassifiedElements(vp: ScreenViewport, conn: IModelConnection, candidates: SpatialElement[]): Promise<Record<ElementPosition, SpatialElement[]> | undefined> {\r\n    const clip = vp.view.getViewClip();\r\n    if (clip === undefined)\r\n      return;\r\n\r\n    const candidatesId = candidates.map((candidate) => candidate.id) as Id64Array;\r\n\r\n    const classifiedElements = {\r\n      [ElementPosition.InsideTheBox]: [] as SpatialElement[],\r\n      [ElementPosition.Overlap]: [] as SpatialElement[],\r\n    };\r\n\r\n    const requestProps: GeometryContainmentRequestProps = {\r\n      candidates: candidatesId,\r\n      clip: clip.toJSON(),\r\n      allowOverlaps: true,\r\n      viewFlags: vp.viewFlags.toJSON(),\r\n    };\r\n\r\n    const result = await conn.getGeometryContainment(requestProps);\r\n    if (BentleyStatus.SUCCESS !== result.status || undefined === result.candidatesContainment)\r\n      return;\r\n\r\n    result.candidatesContainment.forEach((val: ClipPlaneContainment, index: number) => {\r\n      switch (val) {\r\n        case ClipPlaneContainment.StronglyInside:\r\n          classifiedElements[ElementPosition.InsideTheBox].push(candidates[index]);\r\n          break;\r\n        case ClipPlaneContainment.Ambiguous:\r\n          classifiedElements[ElementPosition.Overlap].push(candidates[index]);\r\n          break;\r\n      }\r\n    });\r\n\r\n    return classifiedElements;\r\n  }\r\n\r\n  /* Getting range of the clip */\r\n  public static computeClipRange(viewport: ScreenViewport): Range3d {\r\n    const range = viewport.computeViewRange();\r\n    const clip = viewport.view.getViewClip();\r\n    if (undefined !== clip) {\r\n      const clipRange = ClipUtilities.rangeOfClipperIntersectionWithRange(clip, range);\r\n      if (!clipRange.isNull)\r\n        range.setFrom(clipRange);\r\n    }\r\n\r\n    return range;\r\n  }\r\n\r\n  public static async colorClassifiedElements(vp: ScreenViewport, classifiedElements: Record<ElementPosition, SpatialElement[]>, colors: Record<SectionOfColoring, ColorDef>) {\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(classifiedElements[SectionOfColoring.InsideTheBox].map((x) => x.id), vp, colors[SectionOfColoring.InsideTheBox]);\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(classifiedElements[SectionOfColoring.Overlap].map((x) => x.id), vp, colors[SectionOfColoring.Overlap]);\r\n    /* All elements that are not overridden are outside the box by default. So to color them we don't need to have elements ids.\r\n    This is done so we would not need to query large amount of elements that are outside the box */\r\n    EmphasizeElements.getOrCreate(vp).defaultAppearance = FeatureAppearance.fromRgb(colors[SectionOfColoring.OutsideTheBox]);\r\n  }\r\n\r\n  public static async getIsoView(imodel: IModelConnection): Promise<ViewState> {\r\n    const viewState = await ViewSetup.getDefaultView(imodel);\r\n\r\n    if (viewState.is3d()) {\r\n      // Rotate the view to make the view clip look better.\r\n      viewState.setStandardRotation(StandardViewId.RightIso);\r\n\r\n      const range = viewState.computeFitRange();\r\n      const aspect = ViewSetup.getAspectRatio();\r\n\r\n      viewState.lookAtVolume(range, aspect);\r\n    }\r\n\r\n    return viewState;\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport React, { useCallback, useEffect, useMemo } from \"react\";\r\nimport { Column } from \"react-table\";\r\nimport { AbstractWidgetProps, StagePanelLocation, StagePanelSection, UiItemsProvider, WidgetState } from \"@itwin/appui-abstract\";\r\nimport { useActiveIModelConnection, useActiveViewport } from \"@itwin/appui-react\";\r\nimport { ColorDef } from \"@itwin/core-common\";\r\nimport { ColorPickerButton } from \"@itwin/imodel-components-react\";\r\nimport { Alert, Button, InputGroup, LabeledSelect, Table, Text, ToggleSwitch } from \"@itwin/itwinui-react\";\r\nimport { ElementPosition, SectionOfColoring, SpatialElement, VolumeQueryApi } from \"./VolumeQueryApi\";\r\nimport \"./VolumeQuery.scss\";\r\n\r\nconst columns: Column<SpatialElement>[] = [\r\n  {\r\n    Header: \"Table\",\r\n    columns: [\r\n      { Header: \"Element Id\", accessor: \"id\", maxWidth: 130 },\r\n      { Header: \"Name\", accessor: \"name\" },\r\n    ],\r\n  },\r\n];\r\n\r\nconst VolumeQueryWidget = () => {\r\n  const viewport = useActiveViewport();\r\n  const iModelConnection = useActiveIModelConnection();\r\n  const [volumeBoxState, setVolumeBoxState] = React.useState<boolean>(true);\r\n  const [clipVolumeState, setClipVolumeState] = React.useState<boolean>(false);\r\n  const [coloredElements, setColoredElements] = React.useState<Record<ElementPosition, number>>({\r\n    [ElementPosition.InsideTheBox]: 0,\r\n    [ElementPosition.Overlap]: 0,\r\n  });\r\n  const [classifiedElementsColors, setClassifiedElementsColors] = React.useState<Record<SectionOfColoring, ColorDef>>({\r\n    [SectionOfColoring.InsideTheBox]: ColorDef.green,\r\n    [SectionOfColoring.Overlap]: ColorDef.blue,\r\n    [SectionOfColoring.OutsideTheBox]: ColorDef.red,\r\n  });\r\n  const [elementsToShow, setElementsToShow] = React.useState<Record<ElementPosition, SpatialElement[]>>({\r\n    [ElementPosition.InsideTheBox]: [],\r\n    [ElementPosition.Overlap]: [],\r\n  });\r\n  const [selectedPosition, setSelectedPosition] = React.useState<ElementPosition>(ElementPosition.InsideTheBox);\r\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n  /* Turning Volume Box on and off */\r\n  useEffect(() => {\r\n    if (!viewport)\r\n      return;\r\n\r\n    if (volumeBoxState) {\r\n      if (!viewport.view.getViewClip()) {\r\n        VolumeQueryApi.clearColorOverrides(viewport);\r\n        VolumeQueryApi.addBoxRange(viewport);\r\n        setElementsToShow({ [ElementPosition.InsideTheBox]: [], [ElementPosition.Overlap]: [] });\r\n      }\r\n    } else {\r\n      VolumeQueryApi.clearClips(viewport);\r\n      setClipVolumeState(false);\r\n    }\r\n  }, [viewport, volumeBoxState]);\r\n\r\n  /* Turning Clip Volume feature on and off */\r\n  useEffect(() => {\r\n    if (viewport) {\r\n      const range = VolumeQueryApi.computeClipRange(viewport);\r\n      if (clipVolumeState) {\r\n        VolumeQueryApi.addBoxRange(viewport, range, true);\r\n      } else {\r\n        VolumeQueryApi.addBoxRange(viewport, range, false);\r\n      }\r\n    }\r\n  }, [clipVolumeState, viewport]);\r\n\r\n  /* Coloring elements that are inside, outside the box or overlapping */\r\n  const applyColorOverrides = useCallback(async () => {\r\n    if (viewport && iModelConnection) {\r\n      setIsLoading(true);\r\n      /* Clearing colors so they don't stack when pressing apply button multiple times */\r\n      VolumeQueryApi.clearColorOverrides(viewport);\r\n      setColoredElements({ [ElementPosition.InsideTheBox]: 0, [ElementPosition.Overlap]: 0 });\r\n      setElementsToShow({ [ElementPosition.InsideTheBox]: [], [ElementPosition.Overlap]: [] });\r\n      let internal: SpatialElement[] = [];\r\n      let overlapping: SpatialElement[] = [];\r\n\r\n      /* Getting elements that are going to be colored */\r\n      const range = VolumeQueryApi.computeClipRange(viewport);\r\n      const spatialElements = await VolumeQueryApi.getSpatialElements(iModelConnection, range);\r\n      let classifiedElements: Record<ElementPosition, SpatialElement[]> | undefined;\r\n\r\n      /* Break up the potential large array into smaller arrays with a maximum of 6 000 keys each.\r\n      For example, if there are 18 000 spatial elements, this will create 3 arrays with 6 000 keys each.\r\n      This is being done because API has a limit for how many ids you can send at once */\r\n      const packsOfIds = Math.floor(spatialElements.length / 6000);\r\n      for (let i = 0; i <= packsOfIds; i++) {\r\n        /* Classifying elements */\r\n        if (i !== packsOfIds) {\r\n          classifiedElements = await VolumeQueryApi.getClassifiedElements(viewport, iModelConnection, spatialElements.slice(i * 6000, (i + 1) * 6000));\r\n        } else {\r\n          classifiedElements = await VolumeQueryApi.getClassifiedElements(viewport, iModelConnection, spatialElements.slice(i * 6000, spatialElements.length + 1));\r\n        }\r\n\r\n        /* Coloring classified elements */\r\n        if (classifiedElements !== undefined) {\r\n          await VolumeQueryApi.colorClassifiedElements(viewport, classifiedElements, classifiedElementsColors);\r\n          internal = internal.concat(classifiedElements.Inside);\r\n          overlapping = overlapping.concat(classifiedElements.Overlap);\r\n        }\r\n      }\r\n\r\n      elementsToShow[ElementPosition.InsideTheBox] = await VolumeQueryApi.getSpatialElementsWithName(viewport, internal.slice(0, 99));\r\n      elementsToShow[ElementPosition.Overlap] = await VolumeQueryApi.getSpatialElementsWithName(viewport, overlapping.slice(0, 99));\r\n      setColoredElements({ [ElementPosition.InsideTheBox]: internal.length, [ElementPosition.Overlap]: overlapping.length });\r\n      setElementsToShow(elementsToShow);\r\n      setIsLoading(false);\r\n    }\r\n\r\n  }, [classifiedElementsColors, elementsToShow, iModelConnection, viewport]);\r\n\r\n  /** Start applying color overrides on load */\r\n  useEffect(() => {\r\n    applyColorOverrides().catch((error) => console.error(error));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const clearColorOverrides = () => {\r\n    if (viewport) {\r\n      VolumeQueryApi.clearColorOverrides(viewport);\r\n      /* Emptying elements to show list and Colored Elements list */\r\n      setElementsToShow({ [ElementPosition.InsideTheBox]: [], [ElementPosition.Overlap]: [] });\r\n      setColoredElements({ [ElementPosition.InsideTheBox]: 0, [ElementPosition.Overlap]: 0 });\r\n    }\r\n  };\r\n\r\n  /* Changing colors of elements that are going to be overridden */\r\n  const onColorPick = (colorValue: ColorDef, position: SectionOfColoring) => {\r\n    const previousColors = classifiedElementsColors;\r\n    previousColors[position] = colorValue;\r\n    setClassifiedElementsColors(previousColors);\r\n  };\r\n\r\n  const elementDisplayOptions = [\r\n    { value: ElementPosition.InsideTheBox, label: \"Inside of volume box\" },\r\n    { value: ElementPosition.Overlap, label: \"Overlapping the volume box\" },\r\n  ];\r\n\r\n  const resolvedElements: SpatialElement[] = useMemo(() => {\r\n    return elementsToShow[selectedPosition].map((element) => ({ id: element.id, className: element.className, name: element.name }));\r\n  }, [elementsToShow, selectedPosition]);\r\n\r\n  return (\r\n    <div className=\"sample-options\">\r\n      <div className=\"sample-grid\">\r\n        <div className=\"elements-grid\">\r\n          <LabeledSelect\r\n            label=\"Display elements:\"\r\n            displayStyle=\"inline\"\r\n            size=\"small\"\r\n            className=\"elements-grid-a\"\r\n            value={selectedPosition}\r\n            onChange={setSelectedPosition}\r\n            options={elementDisplayOptions} />\r\n          {coloredElements[selectedPosition] > 0 && <Text isMuted={true} className=\"elements-grid-c\">\r\n            Found {coloredElements[selectedPosition]} elements\r\n            {(coloredElements[selectedPosition] <= 100) ? \".\" : \", showing the first 100.\"}\r\n          </Text>}\r\n          <Table\r\n            density=\"extra-condensed\"\r\n            data={resolvedElements}\r\n            columns={columns}\r\n            isLoading={isLoading}\r\n            emptyTableContent=\"No matching elements\"\r\n            className=\"elements-grid-b\" />\r\n        </div>\r\n        <div className=\"controls-grid\">\r\n          <ToggleSwitch label=\"Show Volume Box\" checked={volumeBoxState} onChange={() => setVolumeBoxState((state) => !state)} disabled={isLoading} />\r\n          <ToggleSwitch label=\"Clip Volume\" checked={clipVolumeState} onChange={() => setClipVolumeState((state) => !state)} disabled={isLoading || !volumeBoxState} />\r\n          <InputGroup label=\"Coloring for elements:\">\r\n            <div className=\"color-picker\">\r\n              <ColorPickerButton initialColor={classifiedElementsColors.Inside} onColorPick={(color) => onColorPick(color, SectionOfColoring.InsideTheBox)} />\r\n              <Text>Inside</Text>\r\n            </div>\r\n            <div className=\"color-picker\">\r\n              <ColorPickerButton initialColor={classifiedElementsColors.Outside} onColorPick={(color) => onColorPick(color, SectionOfColoring.OutsideTheBox)} />\r\n              <Text>Outside</Text>\r\n            </div>\r\n            <div className=\"color-picker\">\r\n              <ColorPickerButton initialColor={classifiedElementsColors.Overlap} onColorPick={(color) => onColorPick(color, SectionOfColoring.Overlap)} />\r\n              <Text>Overlapping</Text>\r\n            </div>\r\n          </InputGroup>\r\n          <InputGroup displayStyle=\"inline\">\r\n            <Button styleType=\"high-visibility\" className=\"control-button\" disabled={!volumeBoxState || isLoading} onClick={applyColorOverrides}>Apply</Button>\r\n            <Button styleType=\"high-visibility\" className=\"control-button\" disabled={isLoading} onClick={clearColorOverrides}>Clear</Button>\r\n          </InputGroup>\r\n        </div>\r\n        <Alert type=\"informational\" className=\"instructions\">\r\n          Use the controls to query and color spatial elements in the iModel using a volume box\r\n        </Alert>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport class VolumeQueryWidgetProvider implements UiItemsProvider {\r\n  public readonly id: string = \"VolumeQueryWidgetProvider\";\r\n\r\n  public provideWidgets(_stageId: string, _stageUsage: string, location: StagePanelLocation, _section?: StagePanelSection): ReadonlyArray<AbstractWidgetProps> {\r\n    const widgets: AbstractWidgetProps[] = [];\r\n    if (location === StagePanelLocation.Bottom) {\r\n      widgets.push(\r\n        {\r\n          id: \"VolumeQueryWidget\",\r\n          label: \"Volume Query Selector\",\r\n          defaultState: WidgetState.Open,\r\n          getWidgetContent: () => <VolumeQueryWidget />,\r\n        }\r\n      );\r\n    }\r\n    return widgets;\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport React, { useEffect } from \"react\";\r\nimport { FrontstageManager } from \"@itwin/appui-react\";\r\nimport { Viewer, ViewerViewportControlOptions } from \"@itwin/web-viewer-react\";\r\nimport { authClient } from \"./common/AuthorizationClient\";\r\nimport { default3DSandboxUi } from \"./common/DefaultViewerProps\";\r\nimport { mapLayerOptions } from \"./common/MapLayerOptions\";\r\nimport { VolumeQueryApi } from \"./VolumeQueryApi\";\r\nimport { VolumeQueryWidgetProvider } from \"./VolumeQueryWidget\";\r\n\r\nconst uiProviders = [new VolumeQueryWidgetProvider()];\r\nconst viewportOptions: ViewerViewportControlOptions = {\r\n  viewState: async (iModelConnection) => VolumeQueryApi.getIsoView(iModelConnection),\r\n};\r\n\r\nconst iTwinId = process.env.IMJS_ITWIN_ID;\r\nconst iModelId = process.env.IMJS_IMODEL_ID;\r\n\r\nconst VolumeQueryApp = () => {\r\n  /** Sign-in */\r\n  useEffect(() => {\r\n    void authClient.signIn();\r\n  }, []);\r\n\r\n  /** The sample's render method */\r\n  return <Viewer\r\n    iTwinId={iTwinId}\r\n    iModelId={iModelId}\r\n    authClient={authClient}\r\n    enablePerformanceMonitors={true}\r\n    viewportOptions={viewportOptions}\r\n    mapLayerOptions={mapLayerOptions}\r\n    defaultUiConfig={default3DSandboxUi}\r\n    uiProviders={uiProviders}\r\n    theme=\"dark\"\r\n  />;\r\n};\r\n\r\n// Define panel size\r\nFrontstageManager.onFrontstageReadyEvent.addListener((event) => {\r\n  const { bottomPanel } = event.frontstageDef;\r\n  bottomPanel && (bottomPanel.size = 315);\r\n});\r\n\r\nexport default VolumeQueryApp;\r\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./VolumeQueryApp\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}